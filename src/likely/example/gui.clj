(ns likely.example.gui
  (:require [clojure.string]
            [clojure.core.async :as a]
            [likely.example.book :as book])
  (:import [javax.swing JFrame JPanel JTextField JTextArea
            JList JScrollPane ListSelectionModel ListCellRenderer
            BorderFactory SwingUtilities DefaultListModel JSplitPane]
           [java.awt BorderLayout Dimension Color Font]
           [javax.swing JFrame]
           [java.awt.event WindowAdapter]
           [java.awt.event MouseAdapter KeyAdapter]))

(defonce ^:private *frame (atom nil))



;; H친ll koll p친 v친r enda kanal/worker
(defonce ^:private search-ch* (atom nil))

(defn ensure-search-worker!
  "Startar en (1) worker om den inte redan finns.
   apply-results! m친ste uppdatera GUI:t via EDT."
  [apply-results! work]
  (when (nil? @search-ch*)
    (let [ch (a/chan (a/sliding-buffer 1))] ; beh친ll bara SENASTE
      (reset! search-ch* ch)
      (a/go-loop []
        (when-let [q (a/<! ch)]
          ;; K칬r s칬kningen i bakgrundstr친d (daemon)
          (let [res (a/<! (a/thread (work q)))]
            (apply-results! res))
          (recur))))))

(defn request-search!
  "Kallas fr친n din DocumentListener: skicka in nuvarande text."
  [q apply-results! get-words]
  (ensure-search-worker! apply-results! get-words)
  (a/put! @search-ch* q))     ;; put! 칛r icke-blockerande p친 GUI-tr친den

(defn stop-search-worker!
  "St칛ng ner sn칛llt (t.ex. vid f칬nster-dispose)."
  []
  (when-let [ch @search-ch*]
    (a/close! ch)
    (reset! search-ch* nil)))

;; K칬r p친 EDT utan att blockera (ingen retur)
(defn on-edt!
  "K칬r thunk p친 EDT; om vi redan 칛r p친 EDT k칬rs den direkt."
  [thunk]                                  ; thunk 칛r (fn [] ...)
  (if (SwingUtilities/isEventDispatchThread)
    (thunk)
    (SwingUtilities/invokeLater ^Runnable thunk)))

(defmacro EDT!
  "Fire-and-forget p친 EDT."
  [& body]
  `(on-edt! (fn [] ~@body)))

(defmacro EDT??
  "Synkront p친 EDT, returnerar v칛rdet."
  [& body]
  `(on-edt-sync (fn [] ~@body)))

;; K칬r p친 EDT och v칛nta (med returv칛rde)
(defn on-edt-sync
  "K칬r thunk p친 EDT och returnera dess v칛rde; blockar om vi inte 칛r p친 EDT."
  [thunk]
  (if (SwingUtilities/isEventDispatchThread)
    (thunk)
    (let [result (promise)
          error  (atom nil)]
      (SwingUtilities/invokeAndWait
       (proxy [Runnable] []
         (run []
           (try
             (deliver result (thunk))
             (catch Throwable t
               (reset! error t))))))
      (if @error (throw @error) @result))))


(def debug-area (doto (JTextArea.)
                  (.setEditable false)
                  (.setLineWrap true)
                  (.setWrapStyleWord true)))


(defn append-debug
  [^String text]
  (EDT!
   (.append debug-area (str text "\n"))
   (.setCaretPosition debug-area (.getLength (.getDocument debug-area)))))

(defmacro with-stdout

  [& body]
  `(let [s# (new java.io.StringWriter)]
     (binding [*out* s#]
       (let [a# (do ~@body)]
         [a# (str s#)]))))

(with-stdout (println "Hej") (+ 4 5) (println "H친") 4)

(def search-field (JTextField.))
(def default-font (.getFont search-field))
(def larger-font (Font. (.getName default-font) Font/PLAIN (+ 4 (.getSize default-font))))
(defn multiline-renderer []
  (proxy [javax.swing.JTextArea ListCellRenderer] []
    (getListCellRendererComponent
      [list value index isSelected cellHasFocus]
      (let [area (JTextArea. ^String value)
            width (.getWidth list)
            real-width (if (pos? width) (- width 20) 400)]
        
        ;; layout
        (.setLineWrap area true)
        (.setWrapStyleWord area true)
        (.setEditable area false)
        (.setOpaque area true)
        (.setFont area default-font)
        (.setBorder area (BorderFactory/createEmptyBorder 2 4 2 4))
        

        ;; 游눠 S칛tt storlek och preferred size
        (.setSize area (Dimension. real-width Integer/MAX_VALUE))
        (.setPreferredSize area (.getPreferredSize area))

        ;; F칛rg
        (.setBackground area
                        (cond
                          isSelected (.getSelectionBackground list)
                          (even? index) (Color. 240 240 240)
                          :else (Color. 255 255 255)))
        (.setForeground area
                        (if isSelected
                          (.getSelectionForeground list)
                          (.getForeground list)))

        area))))


;; 2. Skapa JList med renderer

(defn make-zebra-jlist [model]
  (let [jlist (JList. model)]
    (.setCellRenderer jlist (multiline-renderer))
    (.setFixedCellHeight jlist -1)      ; till친ter varierande h칬jd
    ;; 游눠 Tvinga renderingen vid resize s친 att setSize f친r ny bredd
    (.addComponentListener jlist
      (proxy [java.awt.event.ComponentAdapter] []
        (componentResized [_]
          (.revalidate jlist)
          (.repaint jlist)
          (.updateUI jlist))))
    {:component (JScrollPane. jlist)
     :model model
     :jlist jlist}))


(defn  close-window [frame]
  (proxy [WindowAdapter] []
    (windowClosing [_]
      (if @*frame
        (do
          (println "Disposar f칬nster. Jag tror jag 칛r (REPL)...")
          (.dispose frame))
        (do
          (println "Avslutar JVM (main)...")
          (System/exit 0))))))





(def search-panel
  (doto (JPanel. (BorderLayout.))
    (.add (javax.swing.JLabel. "Query: ") BorderLayout/WEST)
    (.add search-field BorderLayout/CENTER)))

(def left-list-model (DefaultListModel.))
(def left-list (doto (JList. left-list-model)
                 (.setSelectionMode ListSelectionModel/MULTIPLE_INTERVAL_SELECTION)))
(def left-scroll (doto (JScrollPane. left-list)
                   (.setHorizontalScrollBarPolicy JScrollPane/HORIZONTAL_SCROLLBAR_AS_NEEDED)))
(def left-panel
  (doto (JPanel. (BorderLayout.))
        (.add  (javax.swing.JLabel. "Select words:") BorderLayout/NORTH)
        (.add  left-scroll BorderLayout/CENTER)))

(def middle-list-model (DefaultListModel.))

(def zebra-model (DefaultListModel.))

(defn get-paragraphs [words]

  (->> (mapcat book/refs words)
       (book/deduped-paragraphs-sorted-by-matches
        [:book :chapter :paragraph]
        words)
       (map #(str (:book %) " - " (:chapter %) ":\n" (:text %)))))

(def middle-set
  (let [a (atom [])]
    (add-watch
     a "key"
     (fn [_key _atom _old-state new-state]
       (EDT!
        (let [paragraphs (get-paragraphs new-state)] ;; Det h칛r ska nog ske i en agent som updaterar listan efter s칬kning 칛r klar
           (.clear middle-list-model)
           (doseq [w new-state]
             (.addElement middle-list-model w))
           (.clear zebra-model)
           (doseq [w paragraphs]
             (.addElement zebra-model w))))))
    a))

(def middle-list (JList. middle-list-model))

(def middle-scroll (JScrollPane. middle-list))

(defn conj-unique [v item]
  (if (some #(= % item) v)
    v
    (conj v item)))

(defn remove-item [v item]
  (vec (remove #(= % item) v)))


(def middle-panel
  (doto (JPanel. (BorderLayout.))
    (.add  (javax.swing.JLabel. "Selected words:") BorderLayout/NORTH)
    (.add  middle-scroll BorderLayout/CENTER)))

(defn update-left [words]
  (EDT!
   (.clear left-list-model)
   (doseq [w words]
     (.addElement left-list-model w))))

#_(Current search inneh친ller det senaste vi vill s칬ka efter.
           Ska vara nil om ingen s칬kning sker.
           Om man vill s칬ka efter n친got, s친 ers칛tter man, er칛stter man nil s친 s칬ker man.
           Om det man s칬kt efter inte l칛ngre st친r, s친 f친r man s칬ka igen.
           S칬kning sker s친ledes i en egen tr친d, som startas av den som inleder s칬kning, eftersom denna potentiellt kan f친 s칬ka m친nga g친nger. 
           )


#_(defn get-words [text]
  (let [[r s] (with-stdout
                         (book/search text))]
             (append-debug s)
             (update-left r))
  #_(swap! current-search
           (fn [s]
             (if s
               text)
             (let [[r s] (with-stdout
                           (book/search text))]
               )))
  )

(defn get-words [text]
  (request-search! text
                  (fn [[result debug-text]]
                    (append-debug debug-text)
                    (update-left result))
                  (fn [text] (with-stdout
                           (book/search text append-debug)))))


(defn create-ui []
  (let [frame (JFrame. "Clever search in books")
        root (doto (JPanel. (BorderLayout.))
               (.setPreferredSize (Dimension. 800 600)))
        ;;{:keys [right zebra]} (make-zebra-panel)
        {:keys [component]} (make-zebra-jlist zebra-model)
       
        debug-scroll (JScrollPane. debug-area)
        leftsplit (JSplitPane. JSplitPane/HORIZONTAL_SPLIT left-panel middle-panel)
        rightsplit (JSplitPane. JSplitPane/HORIZONTAL_SPLIT leftsplit component)
        allSplit (JSplitPane. JSplitPane/VERTICAL_SPLIT rightsplit debug-scroll)
        ]

    (.setResizeWeight leftsplit 0.25)
    (.setResizeWeight rightsplit 0.25)
    (.setResizeWeight allSplit 0.75)
    (.add root search-panel BorderLayout/NORTH)
    (.add root allSplit  BorderLayout/CENTER)

    (.setBorder search-panel (BorderFactory/createEmptyBorder 5 5 10 5))
    (.setBorder left-panel   (BorderFactory/createEmptyBorder 5 0 0 0))
    (.setBorder middle-panel (BorderFactory/createEmptyBorder 5 0 0 0))
    (.setBorder root (BorderFactory/createEmptyBorder 5 5 5 5))



    (.setFont left-list larger-font)
    (.setFont middle-list larger-font)
    (.setFont search-field larger-font) ; redundant, men tydligt

    (doto (.getDocument search-field)
      (.addDocumentListener
       (proxy [javax.swing.event.DocumentListener] []
         (insertUpdate [_]
           (let [text (.getText search-field)
                 ]
             (get-words text)
             #_(update-left words)))
         (removeUpdate [e] (.insertUpdate this e))
         (changedUpdate [_]))))

    (let [add-selected
          (fn []
            (when-let [val (.getSelectedValue left-list)]
              (swap! middle-set #(conj-unique % val))))]

      (.addMouseListener left-list
                         (proxy [MouseAdapter] []
                           (mouseClicked [e]
                             (when (= 1 (.getClickCount e))
                               (add-selected)))))
      (.addKeyListener left-list
                       (proxy [KeyAdapter] []
                         (keyPressed [e]
                           (when (#{\newline \space} (.getKeyChar e))
                             (add-selected))))))

    (let [remove-selected
          (fn []
            (when-let [val (.getSelectedValue middle-list)]
              (swap! middle-set #(remove-item % val))))]
      (.addMouseListener middle-list
                         (proxy [MouseAdapter] []
                           (mouseClicked [e]
                             (when (= 1 (.getClickCount e))
                               (remove-selected)))))
      (.addKeyListener middle-list
                       (proxy [KeyAdapter] []
                         (keyPressed [e]
                           (when (#{\newline \space} (.getKeyChar e))
                             (remove-selected))))))

    
    (doto frame
      (.setContentPane root)
      (.pack)
      (.addWindowListener (close-window frame))
      (.setDefaultCloseOperation JFrame/DO_NOTHING_ON_CLOSE)
      (.setVisible true))))


(defn main []
  (EDT! (create-ui))

  (book/book append-debug))



(defn new-ui []
  (EDT!
   (when @*frame
     (.dispose @*frame)) ; d칬da tidigare f칬nster snyggt
   
   (reset! *frame (create-ui))))

(comment 
  (new-ui)
)
